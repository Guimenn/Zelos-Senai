// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["improvedQueryRaw"]
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // Configurações de performance
  relationMode = "prisma"
}

model User {
  id               String   @id @default(cuid())
  name             String
  email            String   @unique
  phone            String?
  role             UserRole @default(CLIENT)
  is_active        Boolean  @default(true)
  position         String?
  hashed_password  String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  // Relacionamentos
  agent            Agent?
  client           Client?
  comments         Comment[]
  notifications    Notification[]

  // Índices para performance
  @@index([email])
  @@index([role])
  @@index([is_active])
  @@index([created_at])
}

model Agent {
  id           String   @id @default(cuid())
  user_id      String   @unique
  employee_id  String   @unique
  department   String
  skills       String[]
  max_tickets  Int      @default(5)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relacionamentos
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tickets     Ticket[] @relation("AgentTickets")
  categories  AgentCategory[]

  // Índices para performance
  @@index([user_id])
  @@index([department])
  @@index([max_tickets])
}

model Client {
  id          String     @id @default(cuid())
  user_id     String     @unique
  company     String?
  client_type ClientType @default(INDIVIDUAL)
  cpf         String?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  // Relacionamentos
  user        User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tickets     Ticket[]   @relation("ClientTickets")

  // Índices para performance
  @@index([user_id])
  @@index([company])
  @@index([client_type])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String   @default("#3B82F6")
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relacionamentos
  tickets     Ticket[]
  agents      AgentCategory[]

  // Índices para performance
  @@index([name])
  @@index([is_active])
}

model Ticket {
  id                  String           @id @default(cuid())
  ticket_number       String           @unique
  title               String
  description         String
  priority            TicketPriority   @default(MEDIUM)
  status              TicketStatus     @default(OPEN)
  category_id         String
  client_id           String
  assigned_to         String?
  satisfaction_rating Int?
  created_at          DateTime         @default(now())
  updated_at          DateTime         @updatedAt
  closed_at           DateTime?

  // Relacionamentos
  category            Category         @relation(fields: [category_id], references: [id])
  client              Client           @relation("ClientTickets", fields: [client_id], references: [id])
  agent               Agent?           @relation("AgentTickets", fields: [assigned_to], references: [id])
  comments            Comment[]
  attachments         Attachment[]
  status_history      TicketStatusHistory[]

  // Índices para performance
  @@index([ticket_number])
  @@index([status])
  @@index([priority])
  @@index([category_id])
  @@index([client_id])
  @@index([assigned_to])
  @@index([created_at])
  @@index([updated_at])
  @@index([closed_at])
  @@index([status, priority])
  @@index([assigned_to, status])
  @@index([category_id, status])
}

model Comment {
  id           String   @id @default(cuid())
  ticket_id    String
  user_id      String
  content      String
  is_internal  Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relacionamentos
  ticket       Ticket   @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // Índices para performance
  @@index([ticket_id])
  @@index([user_id])
  @@index([created_at])
  @@index([is_internal])
}

model Attachment {
  id         String   @id @default(cuid())
  filename   String
  file_path  String
  file_size  Int
  mime_type  String
  ticket_id  String
  created_at DateTime @default(now())

  // Relacionamentos
  ticket     Ticket   @relation(fields: [ticket_id], references: [id], onDelete: Cascade)

  // Índices para performance
  @@index([ticket_id])
  @@index([mime_type])
  @@index([created_at])
}

model Notification {
  id         String           @id @default(cuid())
  user_id    String
  title      String
  message    String
  type       NotificationType @default(INFO)
  is_read    Boolean          @default(false)
  created_at DateTime         @default(now())

  // Relacionamentos
  user       User             @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // Índices para performance
  @@index([user_id])
  @@index([is_read])
  @@index([created_at])
  @@index([type])
}

model AgentCategory {
  id          String   @id @default(cuid())
  agent_id    String
  category_id String
  created_at  DateTime @default(now())

  // Relacionamentos
  agent       Agent    @relation(fields: [agent_id], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  // Índices para performance
  @@index([agent_id])
  @@index([category_id])
  @@unique([agent_id, category_id])
}

model TicketStatusHistory {
  id         String       @id @default(cuid())
  ticket_id  String
  status     TicketStatus
  changed_by String
  changed_at DateTime     @default(now())
  notes      String?

  // Relacionamentos
  ticket     Ticket       @relation(fields: [ticket_id], references: [id], onDelete: Cascade)

  // Índices para performance
  @@index([ticket_id])
  @@index([status])
  @@index([changed_at])
  @@index([changed_by])
}

// Enums
enum UserRole {
  ADMIN
  AGENT
  CLIENT
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_CLIENT
  WAITING_AGENT
  RESOLVED
  CLOSED
  CANCELLED
}

enum ClientType {
  INDIVIDUAL
  COMPANY
  GOVERNMENT
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}
