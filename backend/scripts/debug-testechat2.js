import { PrismaClient } from '../src/generated/prisma/index.js';

const prisma = new PrismaClient();

async function debugTesteChat2() {
  try {
    console.log('üîç Investigando o ticket testeChat2 (TKT-388238-788)...');
    
    // Buscar o ticket testeChat2
    const testTicket = await prisma.ticket.findFirst({
      where: { 
        OR: [
          { title: 'testeChat2' },
          { ticket_number: 'TKT-388238-788' }
        ]
      },
      include: {
        creator: {
          select: { id: true, name: true, email: true, role: true }
        },
        assignee: {
          select: { id: true, name: true, email: true, role: true }
        }
      }
    });

    if (!testTicket) {
      console.log('‚ùå Ticket testeChat2 n√£o encontrado');
      return;
    }

    console.log('‚úÖ Ticket testeChat2 encontrado:');
    console.log(`   - ID: ${testTicket.id}`);
    console.log(`   - T√≠tulo: ${testTicket.title}`);
    console.log(`   - Ticket Number: ${testTicket.ticket_number}`);
    console.log(`   - Status: ${testTicket.status}`);
    console.log(`   - Criado por: ${testTicket.creator.name} (${testTicket.creator.role})`);
    console.log(`   - Atribu√≠do para: ${testTicket.assignee?.name || 'Nenhum'} (${testTicket.assignee?.role || 'N/A'})`);

    // Verificar crit√©rios para chat
    console.log('\nüîç Verificando crit√©rios para chat:');
    
    // 1. Verificar se o ticket est√° fechado
    const isClosed = ['Closed', 'Cancelled', 'Resolved'].includes(testTicket.status);
    console.log(`   - Status fechado? ${isClosed ? '‚ùå SIM' : '‚úÖ N√ÉO'}`);
    console.log(`   - Status atual: ${testTicket.status}`);
    
    if (isClosed) {
      console.log('‚ùå Chat n√£o dispon√≠vel: ticket fechado');
      console.log('üí° Para disponibilizar o chat, o ticket precisa ter status "InProgress"');
      return;
    }

    // 2. Verificar se h√° t√©cnico atribu√≠do
    const hasAssignee = !!(testTicket.assigned_to || testTicket.assignee);
    console.log(`   - Tem t√©cnico atribu√≠do? ${hasAssignee ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    
    if (!hasAssignee) {
      console.log('‚ùå Chat n√£o dispon√≠vel: nenhum t√©cnico atribu√≠do');
      console.log('üí° Para disponibilizar o chat, o ticket precisa ter um t√©cnico atribu√≠do');
      return;
    }

    // 3. Verificar se o t√©cnico aceitou o chamado
    const isAccepted = testTicket.status === 'InProgress';
    console.log(`   - Foi aceito pelo t√©cnico? ${isAccepted ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    
    if (!isAccepted) {
      console.log('‚ùå Chat n√£o dispon√≠vel: t√©cnico n√£o aceitou o chamado');
      console.log('üí° Para disponibilizar o chat, o ticket precisa ter status "InProgress" (aceito pelo t√©cnico)');
      return;
    }

    // Se chegou at√© aqui, o ticket deveria ter chat dispon√≠vel
    console.log('\nüéâ O ticket atende a TODOS os crit√©rios para chat!');
    console.log('   - ‚úÖ Status ativo (n√£o fechado)');
    console.log('   - ‚úÖ T√©cnico atribu√≠do');
    console.log('   - ‚úÖ Aceito pelo t√©cnico (InProgress)');
    console.log('   - ‚úÖ Bot√£o de chat deve aparecer');

    // Verificar se h√° mensagens
    const messages = await prisma.messages.findMany({
      where: { ticket_id: testTicket.id },
      orderBy: { created_at: 'desc' }
    });

    console.log(`\nüìã Mensagens encontradas: ${messages.length}`);
    if (messages.length > 0) {
      console.log('   - H√° mensagens no chat');
    } else {
      console.log('   - Nenhuma mensagem ainda');
    }

    // Verificar se h√° problemas com a estrutura dos dados
    console.log('\nüîç Verificando estrutura dos dados:');
    console.log(`   - Ticket ID: ${testTicket.id} (tipo: ${typeof testTicket.id})`);
    console.log(`   - Creator ID: ${testTicket.creator.id} (tipo: ${typeof testTicket.creator.id})`);
    console.log(`   - Assignee ID: ${testTicket.assignee?.id || 'N/A'} (tipo: ${typeof testTicket.assignee?.id})`);
    
    // Verificar se os IDs s√£o consistentes
    const creatorIdStr = String(testTicket.creator.id);
    const assigneeIdStr = testTicket.assignee ? String(testTicket.assignee.id) : 'N/A';
    console.log(`   - Creator ID (string): ${creatorIdStr}`);
    console.log(`   - Assignee ID (string): ${assigneeIdStr}`);

    // Simular a l√≥gica da API de mensagens
    console.log('\nüîç Simulando l√≥gica da API de mensagens:');
    
    const chatAccess = {
      canAccess: !isClosed && hasAssignee && isAccepted,
      canSend: !isClosed && hasAssignee && isAccepted,
      reason: !isClosed && hasAssignee && isAccepted 
        ? 'Chat dispon√≠vel - ticket ativo com t√©cnico atribu√≠do' 
        : 'Chat n√£o dispon√≠vel',
      ticketStatus: testTicket.status
    };

    console.log(`   - canAccess: ${chatAccess.canAccess}`);
    console.log(`   - canSend: ${chatAccess.canSend}`);
    console.log(`   - reason: ${chatAccess.reason}`);
    console.log(`   - ticketStatus: ${chatAccess.ticketStatus}`);

    if (chatAccess.canAccess) {
      console.log('\nüéØ ChatButtonSimple deveria aparecer? ‚úÖ SIM');
      console.log('\nüí° Se o bot√£o ainda n√£o aparece, pode ser:');
      console.log('   1. Problema na API de mensagens (/api/messages/list)');
      console.log('   2. Problema no hook useChatAvailability');
      console.log('   3. Problema na renderiza√ß√£o do ChatButtonSimple');
      console.log('   4. Problema na fun√ß√£o getTicketAndIdByDisplay');
      
      console.log('\nüîß Para debug:');
      console.log('   1. Abra o console do navegador');
      console.log('   2. Acesse a p√°gina de hist√≥rico');
      console.log('   3. Procure pelo ticket "testeChat2"');
      console.log('   4. Verifique se h√° erros no console');
      console.log('   5. Verifique se a API /api/messages/list est√° funcionando');
    } else {
      console.log('\n‚ùå O ChatButtonSimple n√£o deveria aparecer');
    }

  } catch (error) {
    console.error('‚ùå Erro ao investigar ticket testeChat2:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar o debug
debugTesteChat2();
