import { PrismaClient } from '../src/generated/prisma/index.js';

const prisma = new PrismaClient();

async function acceptTestTicket() {
  try {
    console.log('üîß Aceitando ticket de teste para disponibilizar o chat...');
    
    // Buscar o ticket de teste
    const testTicket = await prisma.ticket.findFirst({
      where: { title: 'Teste de Chat - Ticket Ativo' },
      include: {
        creator: {
          select: { id: true, name: true, email: true, role: true }
        },
        assignee: {
          select: { id: true, name: true, email: true, role: true }
        }
      }
    });

    if (!testTicket) {
      console.log('‚ùå Ticket de teste n√£o encontrado');
      return;
    }

    console.log('‚úÖ Ticket de teste encontrado:');
    console.log(`   - ID: ${testTicket.id}`);
    console.log(`   - T√≠tulo: ${testTicket.title}`);
    console.log(`   - Status atual: ${testTicket.status}`);
    console.log(`   - Criado por: ${testTicket.creator.name} (${testTicket.creator.role})`);
    console.log(`   - Atribu√≠do para: ${testTicket.assignee.name} (${testTicket.assignee.role})`);

    // Verificar se o ticket j√° foi aceito
    if (testTicket.status === 'InProgress') {
      console.log('‚úÖ Ticket j√° est√° em InProgress (aceito)');
    } else {
      // Simular aceita√ß√£o do ticket
      console.log('\nüîÑ Simulando aceita√ß√£o do ticket...');
      
      const updatedTicket = await prisma.ticket.update({
        where: { id: testTicket.id },
        data: {
          status: 'InProgress' // Status quando aceito pelo t√©cnico
        }
      });

      console.log('‚úÖ Ticket aceito com sucesso!');
      console.log(`   - Novo status: ${updatedTicket.status}`);
    }

    // Verificar se h√° registro de agente para o t√©cnico
    const agentRecord = await prisma.agent.findFirst({
      where: { user_id: testTicket.assignee.id }
    });

    if (!agentRecord) {
      console.log('‚ö†Ô∏è  T√©cnico n√£o tem registro na tabela Agent, criando...');
      await prisma.agent.create({
        data: {
          user_id: testTicket.assignee.id,
          employee_id: `AGENT-${testTicket.assignee.id}`,
          department: 'Suporte T√©cnico',
          skills: ['Suporte Geral'],
          max_tickets: 10
        });
      console.log('‚úÖ Registro Agent criado');
    }

    // Verificar se h√° associa√ß√£o do agente com a categoria do ticket
    const categoryAssociation = await prisma.agentCategory.findFirst({
      where: {
        agent_id: agentRecord.id,
        category_id: testTicket.category_id
      }
    });

    if (!categoryAssociation) {
      console.log('‚ö†Ô∏è  Agente n√£o est√° associado √† categoria do ticket, associando...');
      await prisma.agentCategory.create({
        data: {
          agent_id: agentRecord.id,
          category_id: testTicket.category_id
        }
      });
      console.log('‚úÖ Associa√ß√£o Agent-Category criada');
    }

    // Verificar crit√©rios finais para chat
    console.log('\nüîç Verifica√ß√£o final dos crit√©rios para chat:');
    const isClosed = ['Closed', 'Cancelled', 'Resolved'].includes(testTicket.status);
    const hasAssignee = !!testTicket.assignee;
    const isAccepted = testTicket.status === 'InProgress';

    console.log(`   - Status fechado? ${isClosed ? '‚ùå SIM' : '‚úÖ N√ÉO'}`);
    console.log(`   - Tem t√©cnico atribu√≠do? ${hasAssignee ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    console.log(`   - Foi aceito pelo t√©cnico? ${isAccepted ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    console.log(`   - Chat deveria aparecer? ${!isClosed && hasAssignee && isAccepted ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);

    if (!isClosed && hasAssignee && isAccepted) {
      console.log('\nüéâ SUCESSO! O ticket atende a TODOS os crit√©rios para chat:');
      console.log('   - ‚úÖ Status ativo (n√£o fechado)');
      console.log('   - ‚úÖ T√©cnico atribu√≠do');
      console.log('   - ‚úÖ Aceito pelo t√©cnico (InProgress)');
      console.log('   - ‚úÖ Bot√£o de chat deve aparecer na p√°gina de hist√≥rico');
      
      console.log('\nüí° Para testar:');
      console.log('   1. Acesse a p√°gina de hist√≥rico de chamados');
      console.log('   2. Procure pelo ticket "Teste de Chat - Ticket Ativo"');
      console.log('   3. Verifique se o bot√£o de chat aparece');
      console.log('   4. Clique no bot√£o para abrir o modal de chat');
    } else {
      console.log('\n‚ùå ERRO: O ticket ainda n√£o atende a todos os crit√©rios para chat');
    }

    // Listar todos os tickets para verificar
    const allTickets = await prisma.ticket.findMany({
      include: {
        creator: {
          select: { id: true, name: true, email: true, role: true }
        },
        assignee: {
          select: { id: true, name: true, email: true, role: true }
        }
      },
      orderBy: { created_at: 'desc' }
    });

    console.log('\nüìä Todos os tickets no sistema:');
    allTickets.forEach(ticket => {
      const isClosed = ['Closed', 'Cancelled', 'Resolved'].includes(ticket.status);
      const hasAssignee = !!ticket.assignee;
      const isAccepted = ticket.status === 'InProgress';
      const shouldShowChat = !isClosed && hasAssignee && isAccepted;
      
      console.log(`   - Ticket ${ticket.id}: ${ticket.title}`);
      console.log(`     ‚Ä¢ Status: ${ticket.status} ${isClosed ? 'üîí' : 'üü¢'}`);
      console.log(`     ‚Ä¢ T√©cnico: ${ticket.assignee?.name || 'N√£o atribu√≠do'}`);
      console.log(`     ‚Ä¢ Aceito? ${isAccepted ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
      console.log(`     ‚Ä¢ Chat: ${shouldShowChat ? '‚úÖ Dispon√≠vel' : '‚ùå N√£o dispon√≠vel'}`);
    });

  } catch (error) {
    console.error('‚ùå Erro ao aceitar ticket de teste:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar o script
acceptTestTicket();
