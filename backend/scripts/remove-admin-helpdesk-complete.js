import { PrismaClient } from '../src/generated/prisma/index.js';

const prisma = new PrismaClient();

async function removeAdminHelpdeskComplete() {
  try {
    console.log('üîç Removendo admin@helpdesk.com de forma completa...');
    
    const emailToRemove = 'admin@helpdesk.com';
    const emailToTransfer = 'renan.queiroz08sr@gmail.com';
    
    // Buscar os usu√°rios
    const userToRemove = await prisma.user.findUnique({
      where: { email: emailToRemove }
    });

    const userToTransfer = await prisma.user.findUnique({
      where: { email: emailToTransfer }
    });

    if (!userToRemove) {
      console.log('‚ö†Ô∏è  Usu√°rio admin@helpdesk.com n√£o encontrado');
      return;
    }

    if (!userToTransfer) {
      console.log('‚ùå Usu√°rio de destino n√£o encontrado:', emailToTransfer);
      return;
    }

    console.log('‚úÖ Usu√°rios encontrados:');
    console.log('   - Remover:', userToRemove.name, `(${userToRemove.email})`);
    console.log('   - Transferir para:', userToTransfer.name, `(${userToTransfer.email})`);

    // 1. Transferir tickets criados
    console.log('\nüîÑ 1. Transferindo tickets criados...');
    const ticketsCreated = await prisma.ticket.updateMany({
      where: { created_by: userToRemove.id },
      data: { created_by: userToTransfer.id }
    });
    console.log(`   ‚úÖ ${ticketsCreated.count} tickets transferidos`);

    // 2. Transferir tickets atribu√≠dos
    console.log('\nüîÑ 2. Transferindo tickets atribu√≠dos...');
    const ticketsAssigned = await prisma.ticket.updateMany({
      where: { assigned_to: userToRemove.id },
      data: { assigned_to: userToTransfer.id }
    });
    console.log(`   ‚úÖ ${ticketsAssigned.count} tickets transferidos`);

    // 3. Transferir coment√°rios
    console.log('\nüîÑ 3. Transferindo coment√°rios...');
    try {
      const comments = await prisma.comment.updateMany({
        where: { user_id: userToRemove.id },
        data: { user_id: userToTransfer.id }
      });
      console.log(`   ‚úÖ ${comments.count} coment√°rios transferidos`);
    } catch (error) {
      console.log('   ‚ö†Ô∏è  N√£o foi poss√≠vel transferir coment√°rios:', error.message);
    }

    // 4. Transferir notifica√ß√µes
    console.log('\nüîÑ 4. Transferindo notifica√ß√µes...');
    try {
      const notifications = await prisma.notification.updateMany({
        where: { user_id: userToRemove.id },
        data: { user_id: userToTransfer.id }
      });
      console.log(`   ‚úÖ ${notifications.count} notifica√ß√µes transferidas`);
    } catch (error) {
      console.log('   ‚ö†Ô∏è  N√£o foi poss√≠vel transferir notifica√ß√µes:', error.message);
    }

    // 5. Transferir hist√≥rico de tickets
    console.log('\nüîÑ 5. Transferindo hist√≥rico de tickets...');
    try {
      const ticketHistory = await prisma.ticketHistory.updateMany({
        where: { changed_by: userToRemove.id },
        data: { changed_by: userToTransfer.id }
      });
      console.log(`   ‚úÖ ${ticketHistory.count} registros de hist√≥rico transferidos`);
    } catch (error) {
      console.log('   ‚ö†Ô∏è  N√£o foi poss√≠vel transferir hist√≥rico:', error.message);
    }

    // 6. Transferir atribui√ß√µes de tickets
    console.log('\nüîÑ 6. Transferindo atribui√ß√µes de tickets...');
    try {
      const assignments = await prisma.ticketAssignment.updateMany({
        where: { assigned_by: userToRemove.id },
        data: { assigned_by: userToTransfer.id }
      });
      console.log(`   ‚úÖ ${assignments.count} atribui√ß√µes transferidas`);
    } catch (error) {
      console.log('   ‚ö†Ô∏è  N√£o foi poss√≠vel transferir atribui√ß√µes:', error.message);
    }

    // 7. Transferir avalia√ß√µes de agentes
    console.log('\nüîÑ 7. Transferindo avalia√ß√µes de agentes...');
    try {
      const evaluations = await prisma.agentEvaluation.updateMany({
        where: { evaluator_id: userToRemove.id },
        data: { evaluator_id: userToTransfer.id }
      });
      console.log(`   ‚úÖ ${evaluations.count} avalia√ß√µes transferidas`);
    } catch (error) {
      console.log('   ‚ö†Ô∏è  N√£o foi poss√≠vel transferir avalia√ß√µes:', error.message);
    }

    // 8. Remover prefer√™ncias de notifica√ß√£o (se existirem)
    console.log('\nüîÑ 8. Removendo prefer√™ncias de notifica√ß√£o...');
    try {
      const prefs = await prisma.notificationPreference.deleteMany({
        where: { user_id: userToRemove.id }
      });
      console.log(`   ‚úÖ ${prefs.count} prefer√™ncias removidas`);
    } catch (error) {
      console.log('   ‚ö†Ô∏è  N√£o foi poss√≠vel remover prefer√™ncias:', error.message);
    }

    // 9. Remover registro de agente (se existir)
    console.log('\nüîÑ 9. Removendo registro de agente...');
    try {
      const agent = await prisma.agent.deleteMany({
        where: { user_id: userToRemove.id }
      });
      console.log(`   ‚úÖ ${agent.count} registros de agente removidos`);
    } catch (error) {
      console.log('   ‚ö†Ô∏è  N√£o foi poss√≠vel remover agente:', error.message);
    }

    // 10. Remover registro de cliente (se existir)
    console.log('\nüîÑ 10. Removendo registro de cliente...');
    try {
      const client = await prisma.client.deleteMany({
        where: { user_id: userToRemove.id }
      });
      console.log(`   ‚úÖ ${client.count} registros de cliente removidos`);
    } catch (error) {
      console.log('   ‚ö†Ô∏è  N√£o foi poss√≠vel remover cliente:', error.message);
    }

    // 11. Finalmente, remover o usu√°rio
    console.log('\nüóëÔ∏è  11. Removendo usu√°rio...');
    const deletedUser = await prisma.user.delete({
      where: { id: userToRemove.id }
    });

    console.log('‚úÖ Usu√°rio exclu√≠do com sucesso!');
    console.log('   - ID removido:', deletedUser.id);
    console.log('   - Email removido:', deletedUser.email);
    console.log('   - Nome removido:', deletedUser.name);

    // Verificar se foi removido
    const verifyUser = await prisma.user.findUnique({
      where: { email: emailToRemove }
    });

    if (!verifyUser) {
      console.log('‚úÖ Confirma√ß√£o: Usu√°rio foi completamente removido');
    } else {
      console.log('‚ùå ERRO: Usu√°rio ainda existe');
    }

    // Listar administradores restantes
    const remainingAdmins = await prisma.user.findMany({
      where: { role: 'Admin' },
      select: { id: true, name: true, email: true, is_active: true, position: true }
    });

    console.log('\nüìä Administradores restantes:');
    remainingAdmins.forEach(admin => {
      console.log(`   - ${admin.name} (${admin.email}) - ${admin.role} - ${admin.is_active ? '‚úÖ Ativo' : '‚ùå Inativo'}`);
    });

    console.log('\nüéâ Processo conclu√≠do!');
    console.log('   - admin@helpdesk.com foi removido');
    console.log('   - Todos os dados foram transferidos para renan.queiroz08sr@gmail.com');
    console.log('   - Renan agora √© o √∫nico Admin Master');

  } catch (error) {
    console.error('‚ùå Erro ao remover usu√°rio:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar o script
removeAdminHelpdeskComplete();
