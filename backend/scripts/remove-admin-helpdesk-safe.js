import { PrismaClient } from '../src/generated/prisma/index.js';

const prisma = new PrismaClient();

async function removeAdminHelpdeskSafe() {
  try {
    console.log('üîç Removendo admin@helpdesk.com de forma segura...');
    
    const emailToRemove = 'admin@helpdesk.com';
    const emailToTransfer = 'renan.queiroz08sr@gmail.com'; // Transferir para Renan
    
    // Buscar o usu√°rio a ser removido
    const userToRemove = await prisma.user.findUnique({
      where: { email: emailToRemove }
    });

    if (!userToRemove) {
      console.log('‚ö†Ô∏è  Usu√°rio admin@helpdesk.com n√£o encontrado no sistema');
      return;
    }

    // Buscar o usu√°rio para transferir os dados
    const userToTransfer = await prisma.user.findUnique({
      where: { email: emailToTransfer }
    });

    if (!userToTransfer) {
      console.log('‚ùå Usu√°rio de destino n√£o encontrado:', emailToTransfer);
      return;
    }

    console.log('‚úÖ Usu√°rios encontrados:');
    console.log('   - Remover:', userToRemove.name, `(${userToRemove.email})`);
    console.log('   - Transferir para:', userToTransfer.name, `(${userToTransfer.email})`);

    // Verificar depend√™ncias
    console.log('\nüîç Verificando depend√™ncias...');
    
    const ticketsCreated = await prisma.ticket.count({
      where: { created_by: userToRemove.id }
    });
    
    const ticketsAssigned = await prisma.ticket.count({
      where: { assigned_to: userToRemove.id }
    });

    console.log('   - Tickets criados:', ticketsCreated);
    console.log('   - Tickets atribu√≠dos:', ticketsAssigned);

    // Transferir tickets criados
    if (ticketsCreated > 0) {
      console.log('\nüîÑ Transferindo tickets criados...');
      await prisma.ticket.updateMany({
        where: { created_by: userToRemove.id },
        data: { created_by: userToTransfer.id }
      });
      console.log(`   ‚úÖ ${ticketsCreated} tickets transferidos`);
    }

    // Transferir tickets atribu√≠dos
    if (ticketsAssigned > 0) {
      console.log('\nüîÑ Transferindo tickets atribu√≠dos...');
      await prisma.ticket.updateMany({
        where: { assigned_to: userToRemove.id },
        data: { assigned_to: userToTransfer.id }
      });
      console.log(`   ‚úÖ ${ticketsAssigned} tickets transferidos`);
    }

    // Verificar se h√° outras depend√™ncias (mensagens, etc.)
    try {
      const messages = await prisma.message.count({
        where: { user_id: userToRemove.id }
      });
      
      if (messages > 0) {
        console.log('\nüîÑ Transferindo mensagens...');
        await prisma.message.updateMany({
          where: { user_id: userToRemove.id },
          data: { user_id: userToTransfer.id }
        });
        console.log(`   ‚úÖ ${messages} mensagens transferidas`);
      }
    } catch (error) {
      console.log('   ‚ö†Ô∏è  N√£o foi poss√≠vel transferir mensagens:', error.message);
    }

    // Agora excluir o usu√°rio
    console.log('\nüóëÔ∏è  Excluindo usu√°rio admin@helpdesk.com...');
    
    const deletedUser = await prisma.user.delete({
      where: { id: userToRemove.id }
    });

    console.log('‚úÖ Usu√°rio exclu√≠do com sucesso!');
    console.log('   - ID removido:', deletedUser.id);
    console.log('   - Email removido:', deletedUser.email);
    console.log('   - Nome removido:', deletedUser.name);

    // Verificar se foi realmente removido
    const verifyUser = await prisma.user.findUnique({
      where: { email: emailToRemove }
    });

    if (!verifyUser) {
      console.log('‚úÖ Confirma√ß√£o: Usu√°rio foi completamente removido do sistema');
    } else {
      console.log('‚ùå ERRO: Usu√°rio ainda existe no sistema');
    }

    // Listar administradores restantes
    const remainingAdmins = await prisma.user.findMany({
      where: { role: 'Admin' },
      select: { id: true, name: true, email: true, is_active: true, position: true }
    });

    console.log('\nüìä Administradores restantes no sistema:');
    if (remainingAdmins.length === 0) {
      console.log('   ‚ö†Ô∏è  Nenhum administrador encontrado!');
    } else {
      remainingAdmins.forEach(admin => {
        console.log(`   - ${admin.name} (${admin.email}) - ${admin.role} - ${admin.is_active ? '‚úÖ Ativo' : '‚ùå Inativo'}`);
      });
    }

    console.log('\nüéâ Processo conclu√≠do com sucesso!');
    console.log('   - admin@helpdesk.com foi removido');
    console.log('   - Dados foram transferidos para renan.queiroz08sr@gmail.com');
    console.log('   - Renan agora √© o √∫nico Admin Master do sistema');

  } catch (error) {
    console.error('‚ùå Erro ao remover usu√°rio admin@helpdesk.com:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar o script
removeAdminHelpdeskSafe();
