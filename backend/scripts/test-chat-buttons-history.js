import { PrismaClient } from '../src/generated/prisma/index.js';

const prisma = new PrismaClient();

async function testChatButtonsHistory() {
  try {
    console.log('üîç Testando funcionalidade de chat na p√°gina de hist√≥rico...');
    
    // Buscar alguns tickets para testar
    const tickets = await prisma.ticket.findMany({
      take: 5,
      include: {
        creator: {
          select: { id: true, name: true, email: true, role: true }
        },
        assignee: {
          select: { id: true, name: true, email: true, role: true }
        }
      },
      orderBy: { created_at: 'desc' }
    });

    console.log(`‚úÖ Encontrados ${tickets.length} tickets para teste:`);
    
    tickets.forEach((ticket, index) => {
      console.log(`\nüìã Ticket ${index + 1}:`);
      console.log(`   - ID: ${ticket.id}`);
      console.log(`   - T√≠tulo: ${ticket.title}`);
      console.log(`   - Status: ${ticket.status}`);
      console.log(`   - Criado por: ${ticket.creator?.name} (${ticket.creator?.email}) - ${ticket.creator?.role}`);
      console.log(`   - Atribu√≠do para: ${ticket.assignee?.name || 'N√£o atribu√≠do'} (${ticket.assignee?.email || 'N/A'}) - ${ticket.assignee?.role || 'N/A'}`);
      
      // Verificar se o ticket tem as informa√ß√µes necess√°rias para o chat
      const hasRequiredData = ticket.creator && ticket.assignee;
      console.log(`   - ‚úÖ Dados para chat: ${hasRequiredData ? 'Completos' : 'Incompletos'}`);
      
      if (hasRequiredData) {
        console.log(`   - üí¨ Chat dispon√≠vel entre:`);
        console.log(`     ‚Ä¢ ${ticket.creator.name} (${ticket.creator.role})`);
        console.log(`     ‚Ä¢ ${ticket.assignee.name} (${ticket.assignee.role})`);
      }
    });

    // Verificar se h√° mensagens nos tickets
    console.log('\nüîç Verificando mensagens existentes...');
    
    try {
      for (const ticket of tickets) {
        const messageCount = await prisma.message.count({
          where: { ticket_id: ticket.id }
        });
        
        if (messageCount > 0) {
          console.log(`   - Ticket ${ticket.id}: ${messageCount} mensagens`);
        }
      }
    } catch (error) {
      console.log('   ‚ö†Ô∏è  N√£o foi poss√≠vel verificar mensagens:', error.message);
    }

    console.log('\nüéâ Teste conclu√≠do!');
    console.log('üìã Resumo:');
    console.log('   - Bot√µes de chat foram adicionados √† p√°gina de hist√≥rico');
    console.log('   - Fun√ß√£o getTicketAndIdByDisplay foi implementada');
    console.log('   - ChatButtonSimple foi importado e configurado');
    console.log('   - Bot√µes aparecem tanto na visualiza√ß√£o em lista quanto em grid');
    console.log('\nüí° Para testar:');
    console.log('   1. Acesse a p√°gina de hist√≥rico de chamados');
    console.log('   2. Verifique se os bot√µes de chat aparecem nos chamados');
    console.log('   3. Clique no bot√£o de chat para abrir o modal');
    console.log('   4. Teste o envio de mensagens');

  } catch (error) {
    console.error('‚ùå Erro ao testar chat na p√°gina de hist√≥rico:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar o teste
testChatButtonsHistory();
