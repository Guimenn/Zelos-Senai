import { PrismaClient } from '../src/generated/prisma/index.js';

const prisma = new PrismaClient();

async function testMessagesAPIDirect() {
  try {
    console.log('üîç Testando API de mensagens diretamente para o ticket de teste...');
    
    // Buscar o ticket de teste
    const testTicket = await prisma.ticket.findFirst({
      where: { title: 'Teste de Chat - Ticket Ativo' },
      include: {
        creator: {
          select: { id: true, name: true, email: true, role: true }
        },
        assignee: {
          select: { id: true, name: true, email: true, role: true }
        }
      }
    });

    if (!testTicket) {
      console.log('‚ùå Ticket de teste n√£o encontrado');
      return;
    }

    console.log('‚úÖ Ticket de teste encontrado:');
    console.log(`   - ID: ${testTicket.id}`);
    console.log(`   - T√≠tulo: ${testTicket.title}`);
    console.log(`   - Status: ${testTicket.status}`);
    console.log(`   - Criado por: ${testTicket.creator.name} (${testTicket.creator.role})`);
    console.log(`   - Atribu√≠do para: ${testTicket.assignee.name} (${testTicket.assignee.role})`);

    // Simular a l√≥gica da API de mensagens
    console.log('\nüîç Simulando l√≥gica da API de mensagens...');
    
    // Verificar se o ticket est√° fechado
    const isClosed = ['Closed', 'Cancelled', 'Resolved'].includes(testTicket.status);
    console.log(`   - Ticket fechado? ${isClosed ? '‚ùå SIM' : '‚úÖ N√ÉO'}`);
    
    if (isClosed) {
      console.log('‚ùå Chat n√£o dispon√≠vel: ticket fechado');
      return;
    }

    // Verificar se h√° t√©cnico atribu√≠do
    const hasAssignee = !!(testTicket.assigned_to || testTicket.assignee);
    console.log(`   - Tem t√©cnico atribu√≠do? ${hasAssignee ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    
    if (!hasAssignee) {
      console.log('‚ùå Chat n√£o dispon√≠vel: nenhum t√©cnico atribu√≠do');
      return;
    }

    // Buscar mensagens
    const messages = await prisma.messages.findMany({
      where: { ticket_id: testTicket.id },
      orderBy: { created_at: 'desc' }
    });

    console.log(`   - Mensagens encontradas: ${messages.length}`);

    // Simular a resposta da API
    const chatAccess = {
      canAccess: true,
      canSend: true,
      reason: 'Chat dispon√≠vel - ticket ativo com t√©cnico atribu√≠do',
      ticketStatus: testTicket.status
    };

    console.log('\nüìã Resposta simulada da API:');
    console.log(`   - canAccess: ${chatAccess.canAccess}`);
    console.log(`   - canSend: ${chatAccess.canSend}`);
    console.log(`   - reason: ${chatAccess.reason}`);
    console.log(`   - ticketStatus: ${chatAccess.ticketStatus}`);

    // Verificar se o ChatButtonSimple deveria aparecer
    const shouldShowChat = chatAccess.canAccess;
    console.log(`\nüéØ ChatButtonSimple deveria aparecer? ${shouldShowChat ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);

    if (shouldShowChat) {
      console.log('\nüéâ SUCESSO! O ChatButtonSimple deveria aparecer!');
      console.log('   - ‚úÖ API de mensagens retorna canAccess: true');
      console.log('   - ‚úÖ Ticket ativo com t√©cnico atribu√≠do');
      console.log('   - ‚úÖ Chat dispon√≠vel');
      
      console.log('\nüí° Se o bot√£o ainda n√£o aparece, verifique:');
      console.log('   1. Console do navegador para erros JavaScript');
      console.log('   2. Se a API /api/messages/list est√° funcionando');
      console.log('   3. Se o hook useChatAvailability est√° funcionando');
      console.log('   4. Se a fun√ß√£o getTicketAndIdByDisplay est√° retornando o ticket correto');
      
      console.log('\nüîß Para debug no navegador:');
      console.log('   1. Abra F12 (DevTools)');
      console.log('   2. V√° para a aba Console');
      console.log('   3. Acesse a p√°gina de hist√≥rico');
      console.log('   4. Procure por logs do ChatButtonSimple');
      console.log('   5. Verifique se h√° erros em vermelho');
      
      console.log('\nüìä Dados do ticket para debug:');
      console.log(`   - Ticket ID (backend): ${testTicket.id}`);
      console.log(`   - Ticket ID (string): "${testTicket.id}"`);
      console.log(`   - Status: ${testTicket.status}`);
      console.log(`   - T√©cnico: ${testTicket.assignee.name} (ID: ${testTicket.assignee.id})`);
      console.log(`   - Criador: ${testTicket.creator.name} (ID: ${testTicket.creator.id})`);
      
      console.log('\nüîß Teste manual da API:');
      console.log(`   - URL: /api/messages/list?ticket_id=${testTicket.id}`);
      console.log(`   - M√©todo: GET`);
      console.log(`   - Headers: Authorization: Bearer <token>`);
      
    } else {
      console.log('\n‚ùå O ChatButtonSimple n√£o deveria aparecer');
    }

  } catch (error) {
    console.error('‚ùå Erro ao testar API de mensagens:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar o teste
testMessagesAPIDirect();
