/**
 * Script para testar a sincroniza√ß√£o autom√°tica
 * Cria um usu√°rio de teste e verifica se foi sincronizado com Supabase
 */

import prisma from '../prisma/client.js';
import { userExistsInSupabase } from '../src/services/SupabaseSyncService.js';
import { createUser } from '../src/models/User.js';
import dotenv from 'dotenv';

dotenv.config();

async function testAutoSync() {
  try {
    console.log('üß™ Testando sincroniza√ß√£o autom√°tica...');
    
    // Dados do usu√°rio de teste
    const testUserData = {
      name: 'Usu√°rio Teste Auto Sync',
      email: `teste-auto-sync-${Date.now()}@exemplo.com`,
      phone: '11999999999',
      role: 'Client',
      password: 'senha123', // Senha em texto plano para ser hasheada
      is_active: true
    };
    
    console.log(`üìù Criando usu√°rio de teste: ${testUserData.email}`);
    
    // Criar usu√°rio usando o modelo (que tem sincroniza√ß√£o autom√°tica)
    const createdUser = await createUser(testUserData);
    
    console.log(`‚úÖ Usu√°rio criado na tabela: ${createdUser.email} (ID: ${createdUser.id})`);
    
    // Aguardar um pouco para a sincroniza√ß√£o ass√≠ncrona
    console.log('‚è≥ Aguardando sincroniza√ß√£o autom√°tica...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Verificar se foi sincronizado com Supabase
    const existsInSupabase = await userExistsInSupabase(createdUser.email);
    
    if (existsInSupabase) {
      console.log('‚úÖ SUCESSO: Usu√°rio foi sincronizado automaticamente com Supabase!');
    } else {
      console.log('‚ùå FALHA: Usu√°rio n√£o foi encontrado no Supabase');
    }
    
    // Limpar usu√°rio de teste
    console.log('üßπ Limpando usu√°rio de teste...');
    await prisma.user.delete({
      where: { id: createdUser.id }
    });
    
    console.log('‚úÖ Usu√°rio de teste removido');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar o teste
testAutoSync();
