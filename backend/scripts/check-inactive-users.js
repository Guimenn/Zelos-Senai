import { PrismaClient } from '../src/generated/prisma/index.js';

const prisma = new PrismaClient();

async function checkInactiveUsers() {
    try {
        console.log('üîç Verificando usu√°rios inativos...');
        
        const inactiveUsers = await prisma.user.findMany({
            where: { is_active: false },
            select: {
                id: true,
                name: true,
                email: true,
                role: true,
                is_active: true,
                created_at: true
            },
            orderBy: {
                created_at: 'desc'
            }
        });
        
        if (inactiveUsers.length === 0) {
            console.log('‚úÖ Nenhum usu√°rio inativo encontrado');
            return;
        }
        
        console.log(`‚ö†Ô∏è Encontrados ${inactiveUsers.length} usu√°rio(s) inativo(s):`);
        console.log('‚îÄ'.repeat(80));
        
        inactiveUsers.forEach((user, index) => {
            console.log(`${index + 1}. ${user.name} (${user.email})`);
            console.log(`   Role: ${user.role}`);
            console.log(`   Ativo: ${user.is_active ? '‚úÖ Sim' : '‚ùå N√£o'}`);
            console.log(`   ID: ${user.id}`);
            console.log(`   Criado em: ${user.created_at.toLocaleString('pt-BR')}`);
            console.log('');
        });
        
        // Verificar se h√° usu√°rios Client inativos
        const inactiveClients = inactiveUsers.filter(user => user.role === 'Client');
        if (inactiveClients.length > 0) {
            console.log('üö® ATEN√á√ÉO: Usu√°rios Client inativos encontrados:');
            inactiveClients.forEach(user => {
                console.log(`   - ${user.name} (${user.email})`);
            });
            console.log('\nüí° Estes usu√°rios receber√£o "acesso negado" ao tentar fazer login!');
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar usu√°rios inativos:', error);
    } finally {
        await prisma.$disconnect();
    }
}

checkInactiveUsers();
