import { PrismaClient } from '../src/generated/prisma/index.js';

const prisma = new PrismaClient();

async function debugChatVisibility() {
  try {
    console.log('üîç Investigando por que os bot√µes de chat n√£o aparecem na p√°gina de hist√≥rico...');
    
    // Buscar todos os tickets
    const tickets = await prisma.ticket.findMany({
      include: {
        creator: {
          select: { id: true, name: true, email: true, role: true }
        },
        assignee: {
          select: { id: true, name: true, email: true, role: true }
        }
      },
      orderBy: { created_at: 'desc' }
    });

    console.log(`\nüìä Total de tickets encontrados: ${tickets.length}`);
    
    let ticketsWithChat = 0;
    let ticketsWithoutChat = 0;
    
    for (const ticket of tickets) {
      console.log(`\nüìã Ticket ${ticket.id}:`);
      console.log(`   - T√≠tulo: ${ticket.title}`);
      console.log(`   - Status: ${ticket.status}`);
      console.log(`   - Criado por: ${ticket.creator?.name} (${ticket.creator?.role})`);
      console.log(`   - Atribu√≠do para: ${ticket.assignee?.name || 'N√£o atribu√≠do'} (${ticket.assignee?.role || 'N/A'})`);
      
      // Verificar condi√ß√µes para chat
      const isClosed = ['Closed', 'Cancelled', 'Resolved'].includes(ticket.status);
      const hasAssignee = !!ticket.assignee;
      
      console.log(`   - Status fechado? ${isClosed ? '‚ùå SIM' : '‚úÖ N√ÉO'}`);
      console.log(`   - Tem t√©cnico atribu√≠do? ${hasAssignee ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
      
      // Determinar se o chat deveria aparecer
      const shouldShowChat = !isClosed && hasAssignee;
      console.log(`   - Chat deveria aparecer? ${shouldShowChat ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
      
      if (shouldShowChat) {
        ticketsWithChat++;
        console.log(`   - üí¨ Chat dispon√≠vel entre:`);
        console.log(`     ‚Ä¢ ${ticket.creator.name} (${ticket.creator.role})`);
        console.log(`     ‚Ä¢ ${ticket.assignee.name} (${ticket.assignee.role})`);
      } else {
        ticketsWithoutChat++;
        if (isClosed) {
          console.log(`   - ‚ùå Motivo: Ticket fechado (${ticket.status})`);
        } else if (!hasAssignee) {
          console.log(`   - ‚ùå Motivo: Nenhum t√©cnico atribu√≠do`);
        }
      }
    }

    console.log(`\nüìä Resumo:`);
    console.log(`   - Tickets com chat dispon√≠vel: ${ticketsWithChat}`);
    console.log(`   - Tickets sem chat: ${ticketsWithoutChat}`);
    console.log(`   - Total: ${tickets.length}`);

    // Verificar se h√° tickets que deveriam ter chat mas n√£o t√™m
    const ticketsThatShouldHaveChat = tickets.filter(t => 
      !['Closed', 'Cancelled', 'Resolved'].includes(t.status) && !!t.assignee
    );

    console.log(`\nüí¨ Tickets que deveriam ter bot√£o de chat:`);
    if (ticketsThatShouldHaveChat.length === 0) {
      console.log(`   - Nenhum ticket atende aos crit√©rios para chat`);
      console.log(`   - Todos os tickets est√£o fechados ou sem t√©cnico atribu√≠do`);
    } else {
      ticketsThatShouldHaveChat.forEach(ticket => {
        console.log(`   - Ticket ${ticket.id}: ${ticket.title} (${ticket.status})`);
        console.log(`     ‚Ä¢ Criador: ${ticket.creator.name} (${ticket.creator.role})`);
        console.log(`     ‚Ä¢ T√©cnico: ${ticket.assignee.name} (${ticket.assignee.role})`);
      });
    }

    // Verificar tickets fechados
    const closedTickets = tickets.filter(t => 
      ['Closed', 'Cancelled', 'Resolved'].includes(t.status)
    );

    console.log(`\nüîí Tickets fechados (chat n√£o dispon√≠vel):`);
    if (closedTickets.length === 0) {
      console.log(`   - Nenhum ticket fechado`);
    } else {
      closedTickets.forEach(ticket => {
        console.log(`   - Ticket ${ticket.id}: ${ticket.title} (${ticket.status})`);
      });
    }

    // Verificar tickets sem t√©cnico
    const ticketsWithoutTechnician = tickets.filter(t => 
      !t.assignee && !['Closed', 'Cancelled', 'Resolved'].includes(t.status)
    );

    console.log(`\nüë§ Tickets sem t√©cnico atribu√≠do:`);
    if (ticketsWithoutTechnician.length === 0) {
      console.log(`   - Todos os tickets ativos t√™m t√©cnico atribu√≠do`);
    } else {
      ticketsWithoutTechnician.forEach(ticket => {
        console.log(`   - Ticket ${ticket.id}: ${ticket.title} (${ticket.status})`);
        console.log(`     ‚Ä¢ Criador: ${ticket.creator.name} (${ticket.creator.role})`);
      });
    }

    console.log(`\nüí° Conclus√£o:`);
    if (ticketsWithChat === 0) {
      console.log(`   - ‚ùå Nenhum ticket atende aos crit√©rios para mostrar bot√£o de chat`);
      console.log(`   - Isso explica por que os bot√µes n√£o aparecem na p√°gina de hist√≥rico`);
      console.log(`   - Para testar o chat, √© necess√°rio:`);
      console.log(`     1. Ter tickets com status diferente de Closed/Cancelled/Resolved`);
      console.log(`     2. Ter t√©cnicos atribu√≠dos a esses tickets`);
    } else {
      console.log(`   - ‚úÖ ${ticketsWithChat} tickets deveriam mostrar bot√£o de chat`);
      console.log(`   - Se os bot√µes n√£o aparecem, pode ser um problema de implementa√ß√£o`);
    }

  } catch (error) {
    console.error('‚ùå Erro ao investigar visibilidade do chat:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar o debug
debugChatVisibility();
