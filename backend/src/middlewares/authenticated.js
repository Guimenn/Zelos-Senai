import jwt from 'jsonwebtoken';
import prisma from '../../prisma/client.js';

const secret = process.env.JWT_SECRET || 'your-super-secret-jwt-key-2024';

/**
 * Middleware de autentica√ß√£o JWT
 * Verifica tokens Bearer e extrai informa√ß√µes do usu√°rio para requisi√ß√µes autenticadas
 */
async function authenticated(req, res, next) {
	console.log('üîç DEBUG - authenticated middleware:', {
		url: req.url,
		method: req.method,
		hasAuthHeader: !!req.headers.authorization,
		authHeader: req.headers.authorization ? `${req.headers.authorization.substring(0, 20)}...` : 'null'
	});

	const authHeader = req.headers.authorization;

	if (!authHeader || !authHeader.startsWith('Bearer ')) {
		console.log('‚ùå Token n√£o fornecido ou formato inv√°lido');
		return res
			.status(401)
			.json({ message: 'N√£o autorizado, token n√£o fornecido' });
	}

	const token = authHeader.split(' ')[1];
	console.log('üîê Token extra√≠do:', token ? `${token.substring(0, 20)}...` : 'null');

	try {
		const decoded = jwt.verify(token, secret);
		console.log('Decoded token:', decoded);
		if (!decoded.userId) {
			console.error('Token missing userId:', decoded);
			return res.status(401).json({ message: 'Token inv√°lido - ID do usu√°rio ausente' });
		}

		// Buscar informa√ß√µes completas do usu√°rio incluindo client e agent
		console.log('üîç Buscando usu√°rio no banco:', decoded.userId);
		const user = await prisma.user.findUnique({
			where: { id: decoded.userId },
			include: {
				client: true,
				agent: true,
			}
		});

		if (!user) {
			console.log('‚ùå Usu√°rio n√£o encontrado no banco:', decoded.userId);
			return res.status(401).json({ message: 'Usu√°rio n√£o encontrado' });
		}

		console.log('‚úÖ Usu√°rio encontrado:', {
			id: user.id,
			name: user.name,
			email: user.email,
			role: user.role,
			is_active: user.is_active
		});

		if (!user.is_active) {
			console.log('‚ùå Usu√°rio desativado:', user.id);
			return res.status(401).json({ message: 'Conta de usu√°rio desativada' });
		}

		req.user = {
			id: user.id,
			name: user.name,
			email: user.email,
			role: user.role,
			client: user.client,
			agent: user.agent,
		};

		next();
	} catch (error) {
		console.error('Authentication error:', error);
		return res
			.status(401)
			.json({ message: 'N√£o autorizado, token inv√°lido ou expirado' });
	}
}

export default authenticated;
