/**
 * Middleware para sincroniza√ß√£o autom√°tica com Supabase
 * Intercepta opera√ß√µes de usu√°rios e sincroniza automaticamente
 */

import { syncUserAsync } from '../services/SupabaseSyncService.js';

/**
 * Middleware para interceptar cria√ß√£o de usu√°rios
 */
function supabaseSyncMiddleware(req, res, next) {
  // Interceptar resposta de cria√ß√£o de usu√°rio
  const originalSend = res.send;
  
  res.send = function(data) {
    // Verificar se √© uma resposta de sucesso de cria√ß√£o de usu√°rio
    if (res.statusCode === 200 || res.statusCode === 201) {
      try {
        const responseData = typeof data === 'string' ? JSON.parse(data) : data;
        
        // Verificar se √© uma resposta de cria√ß√£o de usu√°rio
        if (responseData.user || responseData.message?.includes('criado') || responseData.message?.includes('created')) {
          console.log('üîÑ [MIDDLEWARE] Interceptando cria√ß√£o de usu√°rio para sincroniza√ß√£o');
          
          // Sincronizar com Supabase de forma ass√≠ncrona
          if (responseData.user) {
            syncUserAsync(responseData.user, 'create');
          }
        }
      } catch (error) {
        console.error('‚ùå [MIDDLEWARE] Erro ao processar resposta:', error);
      }
    }
    
    // Chamar o m√©todo original
    originalSend.call(this, data);
  };
  
  next();
}

/**
 * Middleware espec√≠fico para rotas de usu√°rios
 */
function userSyncMiddleware(req, res, next) {
  // Interceptar requisi√ß√µes POST e PUT em rotas de usu√°rios
  if ((req.method === 'POST' || req.method === 'PUT') && req.path.includes('/user')) {
    console.log(`üîÑ [MIDDLEWARE] Interceptando ${req.method} em ${req.path}`);
    
    // Interceptar resposta
    const originalSend = res.send;
    
    res.send = function(data) {
      // Verificar se √© uma resposta de sucesso
      if (res.statusCode === 200 || res.statusCode === 201) {
        try {
          const responseData = typeof data === 'string' ? JSON.parse(data) : data;
          
          // Verificar se cont√©m dados de usu√°rio
          if (responseData.user) {
            const operation = req.method === 'POST' ? 'create' : 'update';
            console.log(`üîÑ [MIDDLEWARE] Sincronizando usu√°rio: ${responseData.user.email} (${operation})`);
            syncUserAsync(responseData.user, operation);
          }
        } catch (error) {
          console.error('‚ùå [MIDDLEWARE] Erro ao processar resposta de usu√°rio:', error);
        }
      }
      
      // Chamar o m√©todo original
      originalSend.call(this, data);
    };
  }
  
  next();
}

export { supabaseSyncMiddleware, userSyncMiddleware };
