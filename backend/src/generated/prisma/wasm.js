
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  avatar: 'avatar',
  created_at: 'created_at',
  modified_at: 'modified_at',
  role: 'role',
  hashed_password: 'hashed_password',
  is_active: 'is_active'
};

exports.Prisma.AgentScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  employee_id: 'employee_id',
  department: 'department',
  skills: 'skills',
  max_tickets: 'max_tickets',
  created_at: 'created_at',
  modified_at: 'modified_at'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  company: 'company',
  client_type: 'client_type',
  created_at: 'created_at',
  modified_at: 'modified_at'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  color: 'color',
  icon: 'icon',
  is_active: 'is_active',
  created_at: 'created_at',
  modified_at: 'modified_at'
};

exports.Prisma.SubcategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category_id: 'category_id',
  is_active: 'is_active',
  created_at: 'created_at',
  modified_at: 'modified_at'
};

exports.Prisma.TicketScalarFieldEnum = {
  id: 'id',
  ticket_number: 'ticket_number',
  title: 'title',
  description: 'description',
  priority: 'priority',
  status: 'status',
  category_id: 'category_id',
  subcategory_id: 'subcategory_id',
  client_id: 'client_id',
  created_by: 'created_by',
  assigned_to: 'assigned_to',
  due_date: 'due_date',
  resolution_time: 'resolution_time',
  satisfaction_rating: 'satisfaction_rating',
  created_at: 'created_at',
  modified_at: 'modified_at',
  closed_at: 'closed_at'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  ticket_id: 'ticket_id',
  user_id: 'user_id',
  content: 'content',
  is_internal: 'is_internal',
  created_at: 'created_at',
  modified_at: 'modified_at'
};

exports.Prisma.AttachmentScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  original_name: 'original_name',
  file_path: 'file_path',
  file_size: 'file_size',
  mime_type: 'mime_type',
  ticket_id: 'ticket_id',
  comment_id: 'comment_id',
  created_at: 'created_at'
};

exports.Prisma.TicketHistoryScalarFieldEnum = {
  id: 'id',
  ticket_id: 'ticket_id',
  field_name: 'field_name',
  old_value: 'old_value',
  new_value: 'new_value',
  changed_by: 'changed_by',
  created_at: 'created_at'
};

exports.Prisma.TicketAssignmentScalarFieldEnum = {
  id: 'id',
  ticket_id: 'ticket_id',
  agent_id: 'agent_id',
  assigned_by: 'assigned_by',
  assigned_at: 'assigned_at',
  unassigned_at: 'unassigned_at'
};

exports.Prisma.SystemSettingsScalarFieldEnum = {
  id: 'id',
  setting_key: 'setting_key',
  setting_value: 'setting_value',
  description: 'description',
  created_at: 'created_at',
  modified_at: 'modified_at'
};

exports.Prisma.ResponseTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  subject: 'subject',
  content: 'content',
  category_id: 'category_id',
  is_active: 'is_active',
  created_at: 'created_at',
  modified_at: 'modified_at'
};

exports.Prisma.SLAScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  priority: 'priority',
  response_time: 'response_time',
  resolution_time: 'resolution_time',
  is_active: 'is_active',
  created_at: 'created_at',
  modified_at: 'modified_at'
};

exports.Prisma.TicketStatisticsScalarFieldEnum = {
  id: 'id',
  date: 'date',
  total_tickets: 'total_tickets',
  open_tickets: 'open_tickets',
  resolved_tickets: 'resolved_tickets',
  closed_tickets: 'closed_tickets',
  avg_resolution_time: 'avg_resolution_time',
  avg_satisfaction: 'avg_satisfaction',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  Admin: 'Admin',
  Agent: 'Agent',
  Client: 'Client'
};

exports.ClientType = exports.$Enums.ClientType = {
  Individual: 'Individual',
  Business: 'Business',
  Enterprise: 'Enterprise'
};

exports.Priority = exports.$Enums.Priority = {
  Low: 'Low',
  Medium: 'Medium',
  High: 'High',
  Critical: 'Critical'
};

exports.TicketStatus = exports.$Enums.TicketStatus = {
  Open: 'Open',
  InProgress: 'InProgress',
  WaitingForClient: 'WaitingForClient',
  WaitingForThirdParty: 'WaitingForThirdParty',
  Resolved: 'Resolved',
  Closed: 'Closed',
  Cancelled: 'Cancelled'
};

exports.Prisma.ModelName = {
  User: 'User',
  Agent: 'Agent',
  Client: 'Client',
  Category: 'Category',
  Subcategory: 'Subcategory',
  Ticket: 'Ticket',
  Comment: 'Comment',
  Attachment: 'Attachment',
  TicketHistory: 'TicketHistory',
  TicketAssignment: 'TicketAssignment',
  SystemSettings: 'SystemSettings',
  ResponseTemplate: 'ResponseTemplate',
  SLA: 'SLA',
  TicketStatistics: 'TicketStatistics'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
