#!/usr/bin/env node

/**
 * Script para diagnosticar problemas SSL com imagens do Supabase
 * Executa testes de conectividade e sugere solu√ß√µes
 */

const https = require('https')
const http = require('http')
const { URL } = require('url')

// Configura√ß√µes
const SUPABASE_URLS = [
  'https://pyrxlymsoidmjxjenesb.supabase.co',
  'https://pyrxlymsoidmjxjenesb.supabase.co/storage/v1/object/public/avatars',
  'https://pyrxlymsoidmjxjenesb.supabase.co/storage/v1/object/public'
]

const TEST_IMAGES = [
  'https://pyrxlymsoidmjxjenesb.supabase.co/storage/v1/object/public/avatars/user-1756324628127.jpg',
  'https://pyrxlymsoidmjxjenesb.supabase.co/storage/v1/object/public/avatars/default-avatar.png'
]

/**
 * Testa conectividade HTTPS com diferentes configura√ß√µes
 */
async function testHTTPSConnectivity(url, options = {}) {
  return new Promise((resolve) => {
    const urlObj = new URL(url)
    const config = {
      hostname: urlObj.hostname,
      port: urlObj.port || 443,
      path: urlObj.pathname + urlObj.search,
      method: 'HEAD',
      timeout: options.timeout || 10000,
      rejectUnauthorized: options.rejectUnauthorized !== false,
      ...options
    }

    const req = https.request(config, (res) => {
      resolve({
        success: true,
        statusCode: res.statusCode,
        headers: res.headers,
        url: url
      })
    })

    req.on('error', (error) => {
      resolve({
        success: false,
        error: error.message,
        code: error.code,
        url: url
      })
    })

    req.on('timeout', () => {
      req.destroy()
      resolve({
        success: false,
        error: 'Timeout',
        code: 'TIMEOUT',
        url: url
      })
    })

    req.setTimeout(config.timeout)
    req.end()
  })
}

/**
 * Testa conectividade HTTP (fallback)
 */
async function testHTTPConnectivity(url, options = {}) {
  return new Promise((resolve) => {
    const urlObj = new URL(url.replace('https://', 'http://'))
    const config = {
      hostname: urlObj.hostname,
      port: urlObj.port || 80,
      path: urlObj.pathname + urlObj.search,
      method: 'HEAD',
      timeout: options.timeout || 10000,
      ...options
    }

    const req = http.request(config, (res) => {
      resolve({
        success: true,
        statusCode: res.statusCode,
        headers: res.headers,
        url: url.replace('https://', 'http://')
      })
    })

    req.on('error', (error) => {
      resolve({
        success: false,
        error: error.message,
        code: error.code,
        url: url.replace('https://', 'http://')
      })
      req.destroy()
    })

    req.on('timeout', () => {
      req.destroy()
      resolve({
        success: false,
        error: 'Timeout',
        code: 'TIMEOUT',
        url: url.replace('https://', 'http://')
      })
    })

    req.setTimeout(config.timeout)
    req.end()
  })
}

/**
 * Testa carregamento de imagem espec√≠fica
 */
async function testImageLoad(imageUrl) {
  console.log(`\nüîç Testando carregamento de imagem: ${imageUrl}`)
  
  // Teste 1: HTTPS com verifica√ß√£o SSL
  console.log('  üì° Testando HTTPS com verifica√ß√£o SSL...')
  const httpsResult = await testHTTPSConnectivity(imageUrl, { rejectUnauthorized: true })
  
  if (httpsResult.success) {
    console.log(`  ‚úÖ HTTPS funcionando: Status ${httpsResult.statusCode}`)
    return { success: true, method: 'https', result: httpsResult }
  }
  
  console.log(`  ‚ùå HTTPS falhou: ${httpsResult.error} (${httpsResult.code})`)
  
  // Teste 2: HTTPS sem verifica√ß√£o SSL
  console.log('  üì° Testando HTTPS sem verifica√ß√£o SSL...')
  const httpsInsecureResult = await testHTTPSConnectivity(imageUrl, { rejectUnauthorized: false })
  
  if (httpsInsecureResult.success) {
    console.log(`  ‚ö†Ô∏è  HTTPS funciona sem verifica√ß√£o SSL: Status ${httpsInsecureResult.statusCode}`)
    return { success: true, method: 'https_insecure', result: httpsInsecureResult }
  }
  
  console.log(`  ‚ùå HTTPS sem verifica√ß√£o SSL falhou: ${httpsInsecureResult.error}`)
  
  // Teste 3: HTTP (fallback)
  console.log('  üì° Testando HTTP como fallback...')
  const httpResult = await testHTTPConnectivity(imageUrl)
  
  if (httpResult.success) {
    console.log(`  ‚ö†Ô∏è  HTTP funciona: Status ${httpResult.statusCode}`)
    return { success: true, method: 'http', result: httpResult }
  }
  
  console.log(`  ‚ùå HTTP falhou: ${httpResult.error}`)
  
  return { success: false, method: 'none', result: null }
}

/**
 * Testa conectividade geral do Supabase
 */
async function testSupabaseConnectivity() {
  console.log('\nüåê Testando conectividade geral do Supabase...')
  
  for (const url of SUPABASE_URLS) {
    console.log(`\n  üì° Testando: ${url}`)
    
    // Teste HTTPS
    const httpsResult = await testHTTPSConnectivity(url)
    if (httpsResult.success) {
      console.log(`    ‚úÖ HTTPS: Status ${httpsResult.statusCode}`)
    } else {
      console.log(`    ‚ùå HTTPS: ${httpsResult.error} (${httpsResult.code})`)
    }
    
    // Teste HTTP
    const httpResult = await testHTTPConnectivity(url)
    if (httpResult.success) {
      console.log(`    ‚ö†Ô∏è  HTTP: Status ${httpResult.statusCode}`)
    } else {
      console.log(`    ‚ùå HTTP: ${httpResult.error}`)
    }
  }
}

/**
 * Gera relat√≥rio de diagn√≥stico
 */
function generateDiagnosticReport(results) {
  console.log('\nüìä RELAT√ìRIO DE DIAGN√ìSTICO')
  console.log('=' .repeat(50))
  
  const workingImages = results.filter(r => r.success)
  const failedImages = results.filter(r => !r.success)
  
  console.log(`\nüìà RESULTADOS:`)
  console.log(`  ‚úÖ Imagens funcionando: ${workingImages.length}`)
  console.log(`  ‚ùå Imagens com falha: ${failedImages.length}`)
  console.log(`  üìä Taxa de sucesso: ${((workingImages.length / results.length) * 100).toFixed(1)}%`)
  
  if (workingImages.length > 0) {
    console.log(`\n‚úÖ IMAGENS FUNCIONANDO:`)
    workingImages.forEach((result, index) => {
      console.log(`  ${index + 1}. ${result.method.toUpperCase()}: ${result.result.url}`)
    })
  }
  
  if (failedImages.length > 0) {
    console.log(`\n‚ùå IMAGENS COM FALHA:`)
    failedImages.forEach((result, index) => {
      console.log(`  ${index + 1}. M√©todo: ${result.method}`)
      console.log(`     URL: ${result.result?.url || 'N/A'}`)
      console.log(`     Erro: ${result.result?.error || 'N/A'}`)
    })
  }
}

/**
 * Sugere solu√ß√µes baseadas nos resultados
 */
function suggestSolutions(results) {
  console.log('\nüí° SUGEST√ïES DE SOLU√á√ÉO')
  console.log('=' .repeat(50))
  
  const hasSSLIssues = results.some(r => !r.success && r.method === 'https')
  const hasWorkingInsecure = results.some(r => r.success && r.method === 'https_insecure')
  const hasWorkingHTTP = results.some(r => r.success && r.method === 'http')
  
  if (hasSSLIssues) {
    console.log('\nüîí PROBLEMAS SSL DETECTADOS:')
    console.log('  ‚Ä¢ Certificado SSL inv√°lido ou expirado')
    console.log('  ‚Ä¢ Problemas de configura√ß√£o do servidor')
    console.log('  ‚Ä¢ Firewall ou proxy interferindo')
    
    if (hasWorkingInsecure) {
      console.log('\n‚úÖ SOLU√á√ÉO TEMPOR√ÅRIA DISPON√çVEL:')
      console.log('  ‚Ä¢ Usar HTTPS sem verifica√ß√£o SSL (n√£o recomendado para produ√ß√£o)')
      console.log('  ‚Ä¢ Implementar fallback para HTTP')
    }
    
    if (hasWorkingHTTP) {
      console.log('\n‚úÖ SOLU√á√ÉO DE FALLBACK DISPON√çVEL:')
      console.log('  ‚Ä¢ Usar HTTP como fallback quando HTTPS falhar')
      console.log('  ‚Ä¢ Implementar sistema de retry autom√°tico')
    }
  }
  
  console.log('\nüõ†Ô∏è  SOLU√á√ïES RECOMENDADAS:')
  console.log('  1. Implementar componente SecureImage com fallbacks')
  console.log('  2. Usar sistema de retry autom√°tico para imagens')
  console.log('  3. Configurar fallback para imagens padr√£o')
  console.log('  4. Implementar cache local de imagens')
  console.log('  5. Usar CDN alternativo se dispon√≠vel')
  
  console.log('\nüìù C√ìDIGO DE EXEMPLO:')
  console.log('  ‚Ä¢ Substituir <img> por <SecureImage>')
  console.log('  ‚Ä¢ Usar hook useSupabaseImage para estado')
  console.log('  ‚Ä¢ Implementar fallback autom√°tico')
}

/**
 * Executa diagn√≥stico completo
 */
async function runDiagnosis() {
  console.log('üîç DIAGN√ìSTICO DE IMAGENS SUPABASE')
  console.log('=' .repeat(50))
  console.log('Data/Hora:', new Date().toLocaleString('pt-BR'))
  console.log('URLs de teste:', TEST_IMAGES.length)
  
  try {
    // Teste de conectividade geral
    await testSupabaseConnectivity()
    
    // Teste de carregamento de imagens espec√≠ficas
    const imageResults = []
    for (const imageUrl of TEST_IMAGES) {
      const result = await testImageLoad(imageUrl)
      imageResults.push(result)
    }
    
    // Gerar relat√≥rio
    generateDiagnosticReport(imageResults)
    
    // Sugerir solu√ß√µes
    suggestSolutions(imageResults)
    
    console.log('\n‚úÖ Diagn√≥stico conclu√≠do!')
    
  } catch (error) {
    console.error('\n‚ùå Erro durante diagn√≥stico:', error.message)
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  runDiagnosis()
}

module.exports = {
  testHTTPSConnectivity,
  testHTTPConnectivity,
  testImageLoad,
  testSupabaseConnectivity,
  runDiagnosis
}
