#!/usr/bin/env node

/**
 * Script de Diagn√≥stico de Autentica√ß√£o
 * Identifica problemas com tokens e autentica√ß√£o
 */

const fs = require('fs')
const path = require('path')

console.log('üîê DIAGN√ìSTICO DE AUTENTICA√á√ÉO\n')

// Fun√ß√£o para verificar arquivos de configura√ß√£o
function checkConfigFiles() {
  console.log('üìÅ Verificando arquivos de configura√ß√£o...')
  
  const configFiles = [
    '.env.local',
    '.env',
    'env.local.example'
  ]
  
  configFiles.forEach(file => {
    const filePath = path.join(process.cwd(), file)
    if (fs.existsSync(filePath)) {
      console.log(`‚úÖ ${file} encontrado`)
      
      // Verificar vari√°veis cr√≠ticas
      const content = fs.readFileSync(filePath, 'utf8')
      const hasSupabaseUrl = content.includes('NEXT_PUBLIC_SUPABASE_API_URL')
      const hasSupabaseKey = content.includes('NEXT_PUBLIC_SUPABASE_ANON_KEY')
      
      if (hasSupabaseUrl) console.log(`   ‚úÖ NEXT_PUBLIC_SUPABASE_API_URL configurado`)
      else console.log(`   ‚ùå NEXT_PUBLIC_SUPABASE_API_URL n√£o encontrado`)
      
      if (hasSupabaseKey) console.log(`   ‚úÖ NEXT_PUBLIC_SUPABASE_ANON_KEY configurado`)
      else console.log(`   ‚ùå NEXT_PUBLIC_SUPABASE_ANON_KEY n√£o encontrado`)
      
    } else {
      console.log(`‚ùå ${file} n√£o encontrado`)
    }
  })
}

// Fun√ß√£o para verificar depend√™ncias
function checkDependencies() {
  console.log('\nüì¶ Verificando depend√™ncias...')
  
  try {
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'))
    
    const requiredDeps = [
      '@supabase/supabase-js',
      'jwt-decode',
      'next'
    ]
    
    requiredDeps.forEach(dep => {
      if (packageJson.dependencies[dep] || packageJson.devDependencies[dep]) {
        console.log(`‚úÖ ${dep} instalado`)
      } else {
        console.log(`‚ùå ${dep} n√£o instalado`)
      }
    })
    
  } catch (error) {
    console.error('‚ùå Erro ao ler package.json:', error.message)
  }
}

// Fun√ß√£o para verificar estrutura de arquivos
function checkFileStructure() {
  console.log('\nüìÇ Verificando estrutura de arquivos...')
  
  const requiredFiles = [
    'utils/tokenManager.ts',
    'utils/cookies.ts',
    'hooks/useAuth.ts',
    'lib/supabase-secure.ts'
  ]
  
  requiredFiles.forEach(file => {
    const filePath = path.join(process.cwd(), file)
    if (fs.existsSync(filePath)) {
      console.log(`‚úÖ ${file} encontrado`)
    } else {
      console.log(`‚ùå ${file} n√£o encontrado`)
    }
  })
}

// Fun√ß√£o para verificar configura√ß√µes do navegador
function checkBrowserConfig() {
  console.log('\nüåê Verificando configura√ß√µes do navegador...')
  
  console.log('üí° Para verificar no navegador:')
  console.log('   1. Abra o DevTools (F12)')
  console.log('   2. V√° para a aba Console')
  console.log('   3. Digite: localStorage.getItem("auth_token")')
  console.log('   4. Verifique se h√° erros de CORS ou SSL')
  console.log('   5. Verifique a aba Network para erros 401')
}

// Fun√ß√£o para verificar problemas comuns
function checkCommonIssues() {
  console.log('\nüîç Verificando problemas comuns...')
  
  console.log('üö® PROBLEMAS FREQUENTES:')
  console.log('   1. Token expirado - Verificar expira√ß√£o do JWT')
  console.log('   2. Token inv√°lido - Verificar formato e assinatura')
  console.log('   3. Problemas de CORS - Verificar configura√ß√µes do backend')
  console.log('   4. Problemas de SSL - Verificar certificados')
  console.log('   5. Cache desatualizado - Limpar cache do navegador')
  console.log('   6. Sess√£o perdida - Verificar persist√™ncia de dados')
}

// Fun√ß√£o para gerar solu√ß√µes
function generateSolutions() {
  console.log('\nüí° SOLU√á√ïES RECOMENDADAS:')
  
  console.log('1. üîÑ Renovar Token:')
  console.log('   - Implementar refresh autom√°tico')
  console.log('   - Verificar expira√ß√£o antes de usar')
  console.log('   - Implementar retry em caso de falha')
  
  console.log('\n2. üßπ Limpar Cache:')
  console.log('   - Limpar localStorage/sessionStorage')
  console.log('   - Limpar cookies de autentica√ß√£o')
  console.log('   - For√ßar logout e novo login')
  
  console.log('\n3. üîí Verificar Configura√ß√µes:')
  console.log('   - Verificar vari√°veis de ambiente')
  console.log('   - Verificar configura√ß√µes do Supabase')
  console.log('   - Verificar configura√ß√µes de CORS')
  
  console.log('\n4. üêõ Debug:')
  console.log('   - Adicionar logs detalhados')
  console.log('   - Verificar console do navegador')
  console.log('   - Verificar logs do backend')
}

// Fun√ß√£o principal
function runDiagnosis() {
  console.log('üöÄ Iniciando diagn√≥stico de autentica√ß√£o...\n')
  
  checkConfigFiles()
  checkDependencies()
  checkFileStructure()
  checkBrowserConfig()
  checkCommonIssues()
  generateSolutions()
  
  console.log('\n‚úÖ Diagn√≥stico conclu√≠do!')
  console.log('üí° Use as informa√ß√µes acima para resolver problemas de autentica√ß√£o')
}

// Executar diagn√≥stico
runDiagnosis().catch(console.error)
